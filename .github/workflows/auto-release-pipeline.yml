name: Auto Release Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - '.github/workflows/auto-release-pipeline.yml'

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME || 'await2719' }}
  IMAGE_NAME: oneid

jobs:
  check-version:
    name: Check Version Changes
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version_type: ${{ steps.check.outputs.version_type }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Version Bump
        id: check
        run: |
          # 跳过 GitHub Actions 自己创建的提交
          if [[ "${{ github.event.head_commit.message }}" == *"[skip ci]"* ]] || \
             [[ "${{ github.event.head_commit.author.name }}" == "github-actions[bot]" ]]; then
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 检查是否有代码变更（排除文档和配置文件）
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(cs|tsx?|json|csproj|sln|sql|resx)$' || true)

          if [ -z "$CHANGED_FILES" ]; then
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 根据提交信息判断版本类型
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"!"* ]]; then
            echo "version_type=major" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == feat* ]] || [[ "$COMMIT_MSG" == *"feature"* ]]; then
            echo "version_type=minor" >> $GITHUB_OUTPUT
          else
            echo "version_type=patch" >> $GITHUB_OUTPUT
          fi

          echo "should_release=true" >> $GITHUB_OUTPUT

  build-and-release:
    name: Build and Release
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Tag
        id: get_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Calculate New Version
        id: new_version
        run: |
          VERSION="${{ steps.get_tag.outputs.latest_tag }}"
          VERSION=${VERSION#v}  # 移除 v 前缀

          IFS='.' read -r major minor patch <<< "$VERSION"

          case "${{ needs.check-version.outputs.version_type }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac

          NEW_VERSION="v${major}.${minor}.${patch}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "major=$major" >> $GITHUB_OUTPUT
          echo "minor=$minor" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.new_version.outputs.new_version }}
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.new_version.outputs.major }}
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.new_version.outputs.major }}.${{ steps.new_version.outputs.minor }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff

      - name: Generate Changelog
        id: changelog
        run: |
          git-cliff --latest --strip header > RELEASE_NOTES.md || echo "## 更新内容\n\n- 版本更新至 ${{ steps.new_version.outputs.new_version }}" > RELEASE_NOTES.md
          cat RELEASE_NOTES.md

      - name: Create Git Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.new_version.outputs.new_version }}" -m "Release ${{ steps.new_version.outputs.new_version }}"
          git push origin "${{ steps.new_version.outputs.new_version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.new_version.outputs.new_version }}
          name: Release ${{ steps.new_version.outputs.new_version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup Old Tags
        run: |
          git fetch --tags
          TAGS=$(git tag -l "v*" | sort -V)
          TAG_COUNT=$(echo "$TAGS" | wc -l)
          if [ "$TAG_COUNT" -gt 10 ]; then
            TAGS_TO_DELETE=$(echo "$TAGS" | head -n $((TAG_COUNT - 10)))
            for tag in $TAGS_TO_DELETE; do
              git push --delete origin "$tag" || true
              git tag -d "$tag" || true
            done
          fi

      - name: Send Telegram Notification
        if: ${{ secrets.TELEGRAM_BOT_TOKEN != '' && secrets.TELEGRAM_CHAT_ID != '' }}
        run: |
          MESSAGE="🎉 OneID 新版本发布！

          📦 版本：${{ steps.new_version.outputs.new_version }}
          🐳 Docker: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.new_version.outputs.new_version }}
          📝 更新日志：https://github.com/${{ github.repository }}/releases/tag/${{ steps.new_version.outputs.new_version }}

          🏗️ 构建平台：linux/amd64, linux/arm64"

          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=$MESSAGE" \
            -d "parse_mode=HTML"
